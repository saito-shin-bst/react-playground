---
description: When you receive instructions, consultation, or questions about code implementation, or when you are implied to implement the code.
globs: 
alwaysApply: false
---
# コードスタイルガイド

## 基本原則
- コードは読みやすく、メンテナンスしやすいものにする
- DRY原則を守る
- 命名は具体的で意味のあるものを使用する

## ファイル構成s

- 1ファイルにつき1つの主要な機能やコンポーネントを定義する
- ファイル名はその内容を適切に表現する
- ディレクトリ構造は機能やドメインに基づいて整理する

## コーディングスタイル
- 変数名: キャメルケース (`userName`)
- コンポーネント名: パスカルケース (`UserProfile`)
- 定数: 大文字のスネークケース (`MAX_COUNT`)
- インデントは2スペース
- 行末の余分なスペースは削除

### コメント

- コードの意図が不明確な場合にのみコメントを追加
- TODO コメントには担当者と期限を含める
- JSDoc形式のコメントを使用して関数やクラスを文書化

## TypeScript/React
- 型は明示的に定義
- any型は使用しない
- コンポーネントは単一責任
- Propsの型は明示的に定義
- 状態管理は最小限に

## コンポーネント設計
- コンポーネントは単一責任の原則に従う
- Props の型は明示的に定義する
- 状態管理は最小限に抑える

## テスト
- 詳細は `vitest.mdc` を参照してください
- 新機能には必ずテストを書く
- テストは独立して実行可能にする
- テストケース名は期待される動作を明確に説明する

## パフォーマンス
- 不要なレンダリングを避ける
- 大きなライブラリの使用は慎重に検討する
- メモ化を適切に使用する

## セキュリティ
- ユーザー入力は必ずバリデーションする
- 機密情報はクライアントサイドに保存しない
- 適切なエラーハンドリングを実装する

## アクセシビリティ
- セマンティックなHTML要素を使用する
- ARIA属性を適切に設定する
- キーボード操作に対応する

## バージョン管理
- コミットメッセージは明確に
- プルリクエストは小さく保つ

このガイドラインは、プロジェクトの成長とともに更新されます。チームメンバーからのフィードバックを歓迎します。

## コンテキスト要件

### アクティブファイルコンテキスト
glob: **/*
priority: 1
現在開いているファイルを常にコンテキストに含めます。

### 開発ガイドライン
- AIは現在開いているファイルの内容とコンテキストを考慮する
- 現在のファイルに関連する提案とフィードバックを提供する
- ファイルと他のプロジェクトファイルとの関係を考慮する
- 現在のファイルに見られるプロジェクトのコーディングスタイルとパターンを尊重する

このルールにより、レスポンスが常に作業中のファイルのコンテキストを意識したものとなります。
